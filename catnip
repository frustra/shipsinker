#!/bin/bash

if [ -f /etc/catnip.conf ]; then
  source /etc/catnip.conf
else
  echo "Missing config in /etc/catnip.conf"
  exit 1
fi

function loadPackage {
  REPO_TYPE=
  REPO_ORIGIN=
  PACKAGE_PREPARE=
  PACKAGE_START=
  PACKAGE_ENV=
  AUTO_START=
  DEPLOY_START=
  if [ -d $CATNIP_HOME/$1 ] && [ -f $CATNIP_HOME/$1/package.cat ]; then
    . $CATNIP_HOME/$1/package.cat
    return 1
  else
    echo "Package not found"
    return 0
  fi
}

function loadBuildNumber {
  cd $CATNIP_HOME/$1
  BUILD_NUMBER=0
  if [ -f ./latest.build ]; then
    BUILD_NUMBER=`expr $(cat ./latest.build 2> /dev/null) + 1` 
  fi
  echo "$BUILD_NUMBER" > ./latest.build
  return $BUILD_NUMBER
}

function checkRunning {
  [ -f $CATNIP_HOME/$1/catnip.pid ] || return 0
  PID1=$(cat $CATNIP_HOME/$1/catnip.pid 2> /dev/null)
  ps -p $PID1 > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    [ -f $CATNIP_HOME/$1/process.pid ] || return 1
    PID2=$(cat $CATNIP_HOME/$1/process.pid 2> /dev/null)
    ps -p $PID2 > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      return 2 # Process and cn-forever running
    else
      return 1 # ONly cn-forever running ( process crashed )
    fi
  else
    return 0 # Nothing running
  fi
}

function archiveArtifacts {
  cd $CATNIP_HOME/$1
  if [ -d $CATNIP_HOME/$1/package/artifacts ]; then
    echo ""
    echo " --- $1: archiving artifacts --- "
    mkdir -m 0755 -p $CATNIP_HOME/$1/artifacts/$BUILD_NUMBER
    cp -R $CATNIP_HOME/$1/package/artifacts/* $CATNIP_HOME/$1/artifacts/$2/
    rm -rf $CATNIP_HOME/$1/package/artifacts
    cd $CATNIP_HOME/$1/artifacts
    ln -sfT ./$BUILD_NUMBER ./latest
  fi
}

function prepare {
  [ -z "$PACKAGE_PREPARE" ] && return
  echo ""
  echo " --- $1: preparing --- "
  cd $CATNIP_HOME/$1/package
  env BUILD_NUMBER=$2 $PACKAGE_PREPARE
  if [ $? -eq 0 ]; then
    archiveArtifacts $1 $2
  else
    echo "Preparing failed"
    exit 1
  fi
}

function deploy {
  lockfile -r 0 $CATNIP_HOME/$1/package.lock
  if [ $? -eq 0 ]; then
    echo " --- $1: starting deploy --- "

    START_TIME=$(date +%s.%N)

    loadBuildNumber $1
    BUILD_NUMBER=$?
    echo "`date`, v$BUILD_NUMBER"
    sync $1
    prepare $1 $BUILD_NUMBER
    if $DEPLOY_START; then
      stop $1
      start $1
      if [ $? -ne 0 ]; then
        exit $?
      fi
    fi

    END_TIME=$(date +%s.%N)
    DURATION=$(echo "$END_TIME - $START_TIME" | bc)

    printf "Deploy completed in %.3F seconds\n" $DURATION

    rm -f $CATNIP_HOME/$1/package.lock
  else
    echo "Failed to aquire lock!"
    exit 1
  fi
}

function list {
  NOTFOUND=true
  echo ""
  echo "Running packages:"
  for dir in `find $CATNIP_HOME -maxdepth 1 -mindepth 1 -type d`; do
    PACKAGE_NAME=$(basename $dir)
    checkRunning $PACKAGE_NAME
    if [ $? -ne 0 ]; then
      if [ $? -eq 2 ]; then
        echo "  $PACKAGE_NAME"
      else
        echo "  $PACKAGE_NAME [crashed]"
      fi
      NOTFOUND=false
    fi
  done
  if $NOTFOUND; then
    echo "  Nothing running"
  fi
}

function log {
  if [ -f $CATNIP_HOME/$1/catnip.log ]; then
    less $CATNIP_HOME/$1/catnip.log
  else
    echo "No log file for $1"
  fi
}

function autostart {
  for dir in `find $CATNIP_HOME -maxdepth 1 -mindepth 1 -type d`; do
    if [ -f $dir/package.cat ]; then
      PACKAGE_NAME=$(basename $dir)
      loadPackage $PACKAGE_NAME || continue
      $AUTO_START && start $PACKAGE_NAME
    fi
  done
}

function stopall {
  for dir in `find $CATNIP_HOME -maxdepth 1 -mindepth 1 -type d`; do
    if [ -f $dir/package.cat ]; then
      PACKAGE_NAME=$(basename $dir)
      loadPackage $PACKAGE_NAME || continue
      stop $PACKAGE_NAME
    fi
  done
}

function start {
  [ -z "$PACKAGE_START" ] && return
  cd $CATNIP_HOME/$1
  echo ""
  echo " --- $1: starting up --- "
  if ! [ -d ./package ]; then
    echo "$1 has no source!"
    return 3
  else
    checkRunning $1
    if [ $? -ne 0 ]; then
      echo "$1 is already running."
      return 0
    fi
  fi
  echo " --- $1: starting up --- `date` --- " >> catnip.log
  touch catnip.pid
  chmod 666 catnip.pid
  cd $CATNIP_HOME/$1/package
  sudo -u $EXEC_USER env CATNIP=true $PACKAGE_ENV nohup $CATNIP_BIN/cn-forever $PACKAGE_START >> $CATNIP_HOME/$1/catnip.log 2>&1 &
  sleep 1
  checkRunning $1
  if [ $? -eq 2 ]; then
    echo "Started Successfully"
    return 0
  elif [ $? -eq 1 ]; then
    echo "Started but crashed"
    return 1
  else
    echo "Failed to start"
    return 2
  fi
}

function stop {
  [ -z "$PACKAGE_START" ] && return
  echo ""
  echo " --- $1: stopping --- "
  cd $CATNIP_HOME/$1

  checkRunning $1
  if [ $? -ne 0 ]; then
    echo " --- $1: stopping --- `date` --- " >> catnip.log
    sudo -u $EXEC_USER kill $PID1
    timeout 2 bash -c "while true; do [ -f catnip.pid ] || break; done"
    checkRunning $1
    if [ $? -ne 0 ]; then
      echo "Failed to stop process"
      return 1
    else
      echo "Stopped $1"
      return 0
    fi
  else
    echo "Process not running"
    return 0
  fi
}

function _syncGit {
  if [ -d $CATNIP_HOME/$1/package ]; then
    cd $CATNIP_HOME/$1/package
    git fetch --all && git reset --hard origin/master
  else
    cd $CATNIP_HOME/$1
    git clone $REPO_ORIGIN ./package
  fi
  [ -f $CATNIP_HOME/$1/package/.git_perm_cache ] && git-perm-cache.sh --apply
}

function _syncHg {
  if [ -d $CATNIP_HOME/$1 ]; then
    cd $CATNIP_HOME/$1/package
    hg pull $REPO_ORIGIN && hg update --clean
  else
    cd $CATNIP_HOME/$1
    git clone $REPO_ORIGIN ./package
  fi
}

function sync {
  echo ""
  echo " --- $1: synchronizing --- "
  if [ -z "$REPO_TYPE" ]; then
    echo "Missing repository type"
    return 1
  elif [ -z "$REPO_ORIGIN" ]; then
    echo "Missing repository origin"
    return 1
  fi
  case $REPO_TYPE in
    git )
      _syncGit $1
      ;;
    hg )
      _syncHg $1
      ;;
    * )
      echo "Invalid repository type specified"
      return 1
  esac
}

function usage {
  echo ""
  echo "    usage: catnip [action] PACKAGE"
  echo ""
  echo "    actions:"
  echo "      autostart    execute start for all packages"
  echo "      deploy       synchronize and start/restart PACKAGE"
  echo "      list         list all running packages"
  echo "      log          display the log file for a package"
  echo "      restart      execute restart for PACKAGE"
  echo "      start        execute start for PACKAGE"
  echo "      stop         execute stop for PACKAGE"
  echo "      stopall      execute stop for all packages"
  echo "      sync         execute synchronize for PACKAGE"
  exit
}

if [ "$(whoami)" != "$BUILD_USER" ]; then
  sudo -u $BUILD_USER $0 $@
  exit
fi

case $1 in
  autostart )
    autostart
    ;;
  d|deploy )
    [ -z "$2" ] && usage
    loadPackage $2
    $? || exit 1
    deploy $2
    ;;
  list )
    list
    ;;
  log )
    [ -z "$2" ] && usage
    log $2
    ;;
  r|restart )
    [ -z "$2" ] && usage
    loadPackage $2
    $? || exit 1
    stop $2
    $? && exit $?
    start $2
    exit $?
    ;;
  start )
    [ -z "$2" ] && usage
    loadPackage $2
    $? || exit 1
    start $2
    exit $?
    ;;
  stop )
    [ -z "$2" ] && usage
    loadPackage $2
    $? || exit 1
    stop $2
    exit $?
    ;;
  stopall )
    stopall
    ;;
  sync )
    [ -z "$2" ] && usage
    loadPackage $2
    $? || exit 1
    sync $2
    ;;
  * )
    usage
esac
